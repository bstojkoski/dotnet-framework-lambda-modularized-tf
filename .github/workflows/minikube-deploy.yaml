name: Minikube Assessment - Deploy Dotnet-todo

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  setup:
    runs-on: ubuntu-20.04 # Minikube requirement.
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Set up Minikube
      uses: manusa/actions-setup-minikube@v2.4.1
      with:
        minikube version: 'v1.26.1'
        kubernetes version: 'v1.22.0'
        driver: 'docker'
        cpus: 2
        memory: 2048

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v1
      with:
        version: 'latest'

    - name: Load helm_version from file
      run: |
        helm_version=$(cat helm_version.txt)
        echo "The Helm version is $helm_version"
        echo "helm_version=$helm_version" >> $GITHUB_ENV

    - name: Replace image tag in values.yaml
      run: |
        sed -i "s/tag: \".*\"/tag: \"${{ env.helm_version }}\"/" helm/dotnet-todo/values.yaml
      env:
        helm_version: ${{ env.helm_version }}

    - name: Verify Replacement
      run: cat helm/dotnet-todo/values.yaml

    - name: Create Kubernetes secret for AWS ECR
      run: |
        kubectl create secret docker-registry aws-ecr-credentials \
          --docker-server=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region eu-west-1)

    - name: Deploy Helm chart
      run: |
        helm install my-todo-app ./helm/dotnet-todo --values ./helm/dotnet-todo/values.yaml

    - name: Wait for Pod to be Running
      run: |
        kubectl rollout status deployment/my-todo-app-dotnet-todo
      continue-on-error: true

    - name: Describe Deployment
      run: |
        kubectl describe deployment my-todo-app-dotnet-todo

    - name: Get Pod Logs
      run: |
        POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=dotnet-todo -o jsonpath="{.items[0].metadata.name}")
        kubectl logs $POD_NAME

    - name: Verify Deployment
      run: |
        kubectl get all

    - name: Describe Service
      run: kubectl describe svc my-todo-app-dotnet-todo

    - name: Download and install ngrok
      run: |
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xvzf ngrok-v3-stable-linux-amd64.tgz
        sudo mv ngrok /usr/local/bin

    - name: Authenticate ngrok
      env:
        NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      run: ngrok config add-authtoken $NGROK_AUTHTOKEN

    - name: Start kubectl port-forward
      run: |
        kubectl describe svc my-todo-app-dotnet-todo
        kubectl port-forward svc/my-todo-app-dotnet-todo 8080:80 &
        sleep 5
        curl -v http://localhost:8080 || echo "Service not reachable"

    - name: Start ngrok
      run: ngrok http 8080 &

    - name: Get ngrok URL
      id: ngrok-url
      run: |
        sleep 5
        curl -s http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url > ngrok_url.txt
        echo "::set-output name=url::$(cat ngrok_url.txt)"

    - name: Output ngrok URL
      run: |
        echo "ngrok URL: ${{ steps.ngrok-url.outputs.url }}"

    - name: Run Tests
      run: |
        # Wait for the application to be up and running
        # Run tests against the application endpoints
        sleep 3000
